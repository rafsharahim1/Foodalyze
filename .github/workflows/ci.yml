name: CI/CD Pipeline

# D4: Triggers on push to main and any Pull Request
on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  # D4a: Linting job
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install linters
        run: pip install ruff black
      - name: Run linters
        run: |
          ruff check .
          black --check .

  # D4b: Testing job (FIXED)
  test:
    runs-on: ubuntu-latest
    needs: lint # Runs after linting
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          # Installs test dependencies directly
          pip install pytest pytest-cov httpx 
      - name: Run tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}
        # Runs pytest as a module to fix "command not found"
        run: python -m pytest -v --maxfail=1 --disable-warnings --cov=app --cov-fail-under=60
      - name: Debug test environment
        run: |
          echo "Listing project files for verification..."
          ls -R
          echo "Checking Python version and installed packages..."
          python --version
          pip list

  # D8: Security scan job (FIXED)
  scan:
    runs-on: ubuntu-latest
    needs: test # Runs after testing
    steps:
      - name: Checkout code
        # We need this to find requirements.txt
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies from requirements
        # We must install the packages to audit them
        run: pip install -r requirements.txt

      - name: Install pip-audit
        run: pip install --upgrade pip-audit

      - name: Scan environment for vulnerabilities
        # Run pip-audit as a module to find the new version
        # This will fail the build on Critical CVEs for the bonus
        run: python -m pip_audit --fail-on CRITICAL

  # D4c: Build and push Docker image
  build-docker:
    runs-on: ubuntu-latest
    needs: scan # Runs after scanning
    permissions:
      contents: read
      packages: write # Permission to push to GHCR
    steps:
      - name: Free up disk space
        run: |
          echo "Cleaning up large preinstalled SDKs and Docker cache..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          docker system prune -af || true
          df -h
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/alina1114/foodalyze:${{ github.sha }} 

  # D4d & D4e: Canary Deploy and Acceptance Test (FIXED)
  canary-and-acceptance-test:
    runs-on: ubuntu-latest
    needs: build-docker 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull the new image
        run: docker pull ghcr.io/alina1114/foodalyze:${{ github.sha }}
      - name: Run the canary container
        run: |
          docker run \
            -d \
            --name canary \
            -p 8000:8000 \
            -e CANARY=true \
            ghcr.io/alina1114/foodalyze:${{ github.sha }}
      - name: Wait for canary to be healthy
        run: |
          echo "Waiting for canary API to start..."
          sleep 15
          # Retry loop in case the container is slow
          for i in 1 2 3 4 5; do curl -f http://localhost:8000/health && break || sleep 5; done
      - name: Run 5+ acceptance tests
        run: |
          echo "Running acceptance tests against http://localhost:8000"
          
          echo "Test 1: /health"
          curl -f http://localhost:8000/health
          
          echo "Test 2: /predict"
          curl -f -X 'POST' \
            'http://localhost:8000/predict' \
            -H 'accept: application/json' \
            -H 'Content-Type: multipart/form-data' \
            -F 'file=@./tests/sample_food.jpg'
          
          echo "Test 3: /predict?conf=0.1"
          curl -f -X 'POST' \
            'http://localhost:8000/predict?conf=0.1' \
            -H 'accept: application/json' \
            -H 'Content-Type: multipart/form-data' \
            -F 'file=@./tests/sample_food.jpg'
          
          echo "Test 4: /predict?conf=0.9"
          curl -f -X 'POST' \
            'http://localhost:8000/predict?conf=0.9' \
            -H 'accept: application/json' \
            -H 'Content-Type: multipart/form-data' \
            -F 'file=@./tests/sample_food.jpg'
          
          echo "Test 5: /model_info"
          curl -f http://localhost:8000/model_info
          
          echo "Test 6: / (root)"
          curl -f http://localhost:8000/

          echo "âœ… All 6 acceptance tests passed!"
          
